(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/handlers/rooms.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/handlers/queue.js":
/*!*******************************!*\
  !*** ./src/handlers/queue.js ***!
  \*******************************/
/*! exports provided: createNewQueue, add, remove, vote */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNewQueue\", function() { return createNewQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"remove\", function() { return remove; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vote\", function() { return vote; });\n/* harmony import */ var _utils_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/id */ \"./src/utils/id.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\nconst AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\r\nlet dynamo = new AWS.DynamoDB.DocumentClient();\r\n\r\n\r\nconst CORS_HEADERS = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Credentials\": true,\r\n};\r\n\r\n/**\r\n * QueueTable: [\r\n *  { \"songs\": [\r\n *      { \"id\": \"SPOTIFY_SONG_ID\", votes: 0}\r\n *      ]\r\n *  }\r\n * ]\r\n */\r\n\r\n/**\r\n * Utility function for creating a new queue\r\n * @param  roomId\r\n */\r\nconst createNewQueue = async (roomId) => {\r\n  const queueId = Object(uuid__WEBPACK_IMPORTED_MODULE_1__[\"v4\"])();\r\n  const queue = {\r\n    queueId,\r\n    roomId,\r\n    songs: [],\r\n  };\r\n\r\n  const params = {\r\n    TableName: process.env.QUEUE_TABLE,\r\n    Item: queue,\r\n  };\r\n\r\n  await dynamo.put(params).promise();\r\n  return queueId;\r\n};\r\n\r\n/**\r\n * Add a song to the queue\r\n * @param {*} event\r\n */\r\nconst add = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n  //TODO: Check if song exists\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"body missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.queueId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"room id missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.songId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"songId missing in the request.\"\r\n    };\r\n    return response;\r\n  }\r\n  const getQueueParam = {\r\n    TableName: process.env.QUEUE_TABLE,\r\n    Key: {\r\n      queueId: data.queueId\r\n    },\r\n    projectionExpression: \"songs\"\r\n  }\r\n\r\n  const currentQueue = await dynamo.get(getQueueParam).promise();\r\n  console.log(currentQueue);\r\n  const newQueue = currentQueue.Item.songs;\r\n  newQueue.push({ songId: data.songId, votes: 0 });\r\n\r\n\r\n  const patchTableParam = {\r\n    TableName: process.env.QUEUE_TABLE,\r\n    Key: {\r\n        queueId: data.queueId,\r\n    },\r\n    UpdateExpression: \"SET songs = :r\",\r\n    ExpressionAttributeValues:{\r\n        \":r\":newQueue\r\n    },\r\n    ReturnValues:\"UPDATED_NEW\"\r\n  }  \r\n  \r\n  const result = await dynamo.update(patchTableParam).promise();\r\n  console.log(result);\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully added song to the queue!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\n/**\r\n * Remove a song from the queue\r\n * @param {*} event\r\n */\r\nconst remove = async (event) => {\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully removed a song from the queue!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\nconst vote = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"room id missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.queueId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"room id missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.songId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"songId missing in the request.\"\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.voteValue) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"vote value missing in the request.\",\r\n    };\r\n    return response;\r\n\r\n  }\r\n  const getQueueParam = {\r\n    TableName: process.env.QUEUE_TABLE,\r\n    Key: {\r\n      queueId: data.queueId\r\n    },\r\n    projectionExpression: \"songs\"\r\n  }\r\n\r\n  const currentQueue = await dynamo.get(getQueueParam).promise();\r\n  const newQueue = currentQueue.Item.songs;\r\n  console.log(newQueue);\r\n\r\n  for (var i = 0; i < newQueue.length; i++) {\r\n    if(newQueue[i].songId == data.songId) {\r\n      newQueue[i].votes = newQueue[i].votes + data.voteValue;\r\n    }\r\n  }\r\n\r\n  const queueVotePatchParams = {\r\n    TableName: process.env.QUEUE_TABLE,\r\n    Key: {\r\n      queueId: data.queueId\r\n    },\r\n    UpdateExpression: \"SET songs = :r\",\r\n    ExpressionAttributeValues:{\r\n        \":r\":newQueue\r\n    },\r\n    ReturnValues:\"UPDATED_NEW\"\r\n  }\r\n\r\n  const result = await dynamo.update(queueVotePatchParams).promise();\r\n  console.log(result);\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully Voted!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\n\n//# sourceURL=webpack:///./src/handlers/queue.js?");

/***/ }),

/***/ "./src/handlers/rooms.js":
/*!*******************************!*\
  !*** ./src/handlers/rooms.js ***!
  \*******************************/
/*! exports provided: createRoom, joinRoom, getRoom, addToQueue, getRooms, deleteRoom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRoom\", function() { return createRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"joinRoom\", function() { return joinRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRoom\", function() { return getRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addToQueue\", function() { return addToQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRooms\", function() { return getRooms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteRoom\", function() { return deleteRoom; });\n/* harmony import */ var _utils_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/id */ \"./src/utils/id.js\");\n/* harmony import */ var _queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./queue */ \"./src/handlers/queue.js\");\n/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./users */ \"./src/handlers/users.js\");\nconst AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\r\nlet dynamo = new AWS.DynamoDB.DocumentClient();\r\n\r\n\r\n\r\n\r\n// TODO: Add number of users to rooms.js\r\nconst CORS_HEADERS = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Credentials\": true,\r\n};\r\n\r\n//TODO: queueid is empty\r\n//TODO: users table, roomid not being added\r\n/**\r\n * Method to create a new room.\r\n * Requires a roomName.\r\n *\r\n * @param {request} event\r\n */\r\nconst createRoom = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"Body missing in the request.\"\r\n    };\r\n    return response;\r\n  }\r\n\r\n  // Validate body\r\n  if (!data.roomName) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"Field roomName is missing in the request.\"\r\n    };\r\n    return response;\r\n  }\r\n\r\n  if (!data.userId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"Field userId is missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const roomId = Object(_utils_id__WEBPACK_IMPORTED_MODULE_0__[\"generateRandomString\"])(5);\r\n  const queueId = await Object(_queue__WEBPACK_IMPORTED_MODULE_1__[\"createNewQueue\"])(roomId); // Generate new queue in table\r\n  await Object(_users__WEBPACK_IMPORTED_MODULE_2__[\"saveRoomToUser\"])(roomId, data.userId);\r\n  console.log(queueId);\r\n  // TODO: Should update rooms in user table\r\n  const admins = [];\r\n  admins.push(data.userId);\r\n\r\n  const room = {\r\n    roomId: roomId,\r\n    queueId: queueId,\r\n    name: data.roomName,\r\n    creator: data.userId,\r\n    admins: admins, // Store creator as first admin\r\n  };\r\n\r\n  const params = {\r\n    TableName: process.env.ROOMS_TABLE,\r\n    Item: room,\r\n  };\r\n\r\n  await dynamo.put(params).promise();\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Room created succesfully!\",\r\n        roomCode: roomId,\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n\r\n  return response;\r\n};\r\n\r\n/**\r\n * Method to join an existing room\r\n * Requires the roomId as path variable.\r\n *\r\n * @param {request} event\r\n */\r\nconst joinRoom = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Body missing!\",\r\n          data: {},\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.roomId) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Body missing!\",\r\n          data: {},\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.userId) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"User Id missing!\",\r\n          data: {},\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n  await Object(_users__WEBPACK_IMPORTED_MODULE_2__[\"saveRoomToUser\"])(data.roomId, data.userId);\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Successfully added user to room.\",\r\n        data: {},\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n}\r\n\r\n/**\r\n * Method to get a rooms information.\r\n * Requires the roomId as path variable.\r\n *\r\n * @param {request} event\r\n */\r\nconst getRoom = async (event) => {\r\n  const params = {\r\n    TableName: process.env.ROOMS_TABLE,\r\n    Key: {\r\n      roomId: event.pathParameters.id,\r\n    },\r\n  };\r\n\r\n  const result = await dynamo.get(params).promise();\r\n\r\n  if (!result.Item) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: CORS_HEADERS,\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Room doesn't exist!\",\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: CORS_HEADERS,\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Room data grabbed successfully\",\r\n        data: result.Item,\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  \r\n  return response;\r\n};\r\n\r\nconst getRoomInfo = async (roomId) => {\r\n  const params = {\r\n    TableName: process.env.ROOMS_TABLE,\r\n    Key: { roomId },\r\n  };\r\n\r\n  const result = await dynamo.get(params).promise();\r\n  if (!result.Item) {\r\n    return null;\r\n  } else { \r\n    return result.Item;\r\n  }\r\n}\r\n\r\nconst addToQueue = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"body missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.roomId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"room id in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"body missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Method to get all rooms associated with a user.\r\n *\r\n * @param {request} event\r\n */\r\nconst getRooms = async (event) => {\r\n  const userId = event.pathParameters.id;\r\n\r\n  if (!userId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: CORS_HEADERS,\r\n      body: \"userId missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const params = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: { userId },\r\n  };\r\n\r\n  const result = await dynamo.get(params).promise();\r\n\r\n  if (!result.Item) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Provided user does not exist in the DB\",\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const allRoomInfo = [];\r\n  const rooms = result.Item.rooms;\r\n  for(const room of rooms) {\r\n    const info = await getRoomInfo(room);\r\n    allRoomInfo.push(info);\r\n  }\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Fetched all rooms succesfully!\",\r\n        items: allRoomInfo\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\n/**\r\n * Method to delete a room and its associated queue.\r\n * Requires the roomId as path variable.\r\n * @param {*} event\r\n */\r\nconst deleteRoom = async (event) => {\r\n  const roomId = event.pathParameters.id;\r\n  const params = {\r\n    TableName: process.env.ROOM_TABLE,\r\n    Key: { roomId },\r\n  };\r\n\r\n  await dynamo\r\n    .delete(params)\r\n    .promise()\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Deleted room succesfully!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\n\n//# sourceURL=webpack:///./src/handlers/rooms.js?");

/***/ }),

/***/ "./src/handlers/users.js":
/*!*******************************!*\
  !*** ./src/handlers/users.js ***!
  \*******************************/
/*! exports provided: createUser, getUser, deleteUser, setUserTokens, saveRoomToUser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createUser\", function() { return createUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUser\", function() { return getUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteUser\", function() { return deleteUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setUserTokens\", function() { return setUserTokens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saveRoomToUser\", function() { return saveRoomToUser; });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_0__);\nconst AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\r\n\r\n\r\nlet dynamo = new AWS.DynamoDB.DocumentClient();\r\n\r\nconst createUser = async (event) => {\r\n  const data = JSON.parse(event.body);\r\n\r\n  // TODO: This should be coming from iam_role authentication\r\n  const userId = 1;\r\n\r\n  if (!data) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: \"Body missing in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n\r\n  if (!data.userId) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: \"cognitoUserId in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n  if (!data.nickname) {\r\n    const response = {\r\n      statusCode: 400,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: \"nickname in the request.\",\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const newUser = {\r\n    userId: data.userId,\r\n    nickname: data.nickname,\r\n    rooms: [],\r\n    refreshToken: \"\",\r\n  };\r\n\r\n  const params = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Item: newUser,\r\n  };\r\n\r\n  await dynamo\r\n    .put(params)\r\n    .promise()\r\n    .catch((err) => {\r\n      console.log(err);\r\n      const response = {\r\n        statusCode: 400,\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Access-Control-Allow-Credentials\": true,\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            message: \"Could not create user\",\r\n          },\r\n          null,\r\n          2\r\n        ),\r\n      };\r\n      return response;\r\n    });\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"User succesfully created!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\nconst getUser = async (event) => {\r\n  const params = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: {\r\n      userId: event.pathParameters.id,\r\n    },\r\n  };\r\n\r\n  const result = await dynamo.get(params).promise();\r\n\r\n  if (!result.Item) {\r\n    const response = {\r\n      statusCode: 404,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Provided user does not exist in the DB\",\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully retrieved user from DB\",\r\n        data: {\r\n          numRooms: result.Item.rooms.length,\r\n          nickname: result.Item.nickname\r\n        },\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\nconst deleteUser = async (event) => {\r\n  const params = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: { userId },\r\n  };\r\n\r\n  await dynamo\r\n    .delete(params)\r\n    .promise()\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Deleted user succesfully!\",\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\nconst setUserTokens = async (event) => {\r\n  console.log(event.body);\r\n  const params = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: {\r\n      userId: event.body.id\r\n    },\r\n    UpdateExpression: \"SET refreshToken = :r\",\r\n    ExpressionAttributeValues: {\r\n      \":r\": event.body.refreshToken,\r\n    },\r\n    ReturnValues: \"UPDATED_NEW\",\r\n  }\r\n  \r\n  const result = await dynamo.update(params).promise();\r\n  console.log(result);\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully added spotify tokens to user!\",\r\n        data: {},\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n}\r\n\r\nconst saveRoomToUser = async (roomId, userId) => {\r\n  //TODO: Add logic for updating user room list + eventually profile info\r\n  const getCurrentRoomsParam = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: { \r\n      userId : userId,\r\n    },\r\n    ProjectionExpression: \"rooms\",\r\n  };\r\n\r\n  const currentRoomList = await dynamo.get(getCurrentRoomsParam).promise();\r\n  if(currentRoomList.Item && currentRoomList.Item.rooms) {\r\n\r\n    const newRoomList = currentRoomList.Item.rooms;\r\n    for (var i = 0; i < newRoomList.length; i++) {\r\n      if (newRoomList[i] == roomId) {\r\n        console.log(\"caught\");\r\n        const response = {\r\n          statusCode: 400,\r\n          headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Access-Control-Allow-Credentials\": true,\r\n  \r\n          },\r\n          body: JSON.stringify(\r\n            {\r\n              message: \"Already in room!\",\r\n              data: {},\r\n            },\r\n            null,\r\n            2\r\n          ),\r\n        }\r\n        return response;\r\n      }\r\n    }\r\n    console.log(newRoomList);\r\n\r\n    newRoomList.push(roomId);\r\n    const patchTableParam = {\r\n      TableName: process.env.USERS_TABLE,\r\n      Key: {\r\n        userId: userId,\r\n      },\r\n      UpdateExpression: \"SET rooms = :r\",\r\n      ExpressionAttributeValues: {\r\n        \":r\": newRoomList,\r\n      },\r\n      ReturnValues: \"UPDATED_NEW\",\r\n    };\r\n  \r\n    const result = await dynamo.update(patchTableParam).promise();\r\n    console.log(result);\r\n    const response = {\r\n      statusCode: 200,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Succesfully joined room!\",\r\n          data: {},\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n\r\n  else if (!currentRoomList.Items || !currentRoomList.Items.rooms) {\r\n    const newRoomList = [];\r\n\r\n    newRoomList.push(roomId);\r\n  \r\n    const patchTableParam = {\r\n      TableName: process.env.USERS_TABLE,\r\n      Key: {\r\n        userId: userId,\r\n      },\r\n      UpdateExpression: \"SET rooms = :r\",\r\n      ExpressionAttributeValues: {\r\n        \":r\": newRoomList,\r\n      },\r\n      ReturnValues: \"UPDATED_NEW\",\r\n    };\r\n  \r\n    console.log(\"caught\");\r\n\r\n    const result = await dynamo.update(patchTableParam).promise();\r\n    const response = {\r\n      statusCode: 200,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      body: JSON.stringify(\r\n        {\r\n          message: \"Succesfully joined room!\",\r\n          data: {},\r\n        },\r\n        null,\r\n        2\r\n      ),\r\n    };\r\n    return response;\r\n  }\r\n  const newRoomList = currentRoomList.Item.rooms;\r\n\r\n  newRoomList.push(roomId);\r\n  console.log(\"caught\");\r\n  const patchTableParam = {\r\n    TableName: process.env.USERS_TABLE,\r\n    Key: {\r\n      userId: userId,\r\n    },\r\n    UpdateExpression: \"SET rooms = :r\",\r\n    ExpressionAttributeValues: {\r\n      \":r\": newRoomList,\r\n    },\r\n    ReturnValues: \"UPDATED_NEW\",\r\n  };\r\n\r\n  const result = await dynamo.update(patchTableParam).promise();\r\n  console.log(result);\r\n  const response = {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true,\r\n    },\r\n    body: JSON.stringify(\r\n      {\r\n        message: \"Succesfully joined room!\",\r\n        data: {},\r\n      },\r\n      null,\r\n      2\r\n    ),\r\n  };\r\n  return response;\r\n};\r\n\r\n// const roomList = JSON.parse(result.Item);\r\n// console.log(roomList);\r\n// roomList.append(event.pathParameters.roomId);\r\n\r\n// const params = {\r\n//   TableName: process.env.USERS_TABLE,\r\n//   Key: {\r\n//       userId: event.pathParameters.userId,\r\n//   },\r\n//   UpdateExpression: \"set rooms = :r\",\r\n//   ExpressionAttributeValues:{\r\n//       \":r\":roomList,\r\n//   },\r\n//   ReturnValues:\"UPDATED_NEW\"\r\n// }\r\n\r\n// const addRoomResult = await dynamo.update(params).promise();\r\n// if (!addRoomResult.Item) {\r\n//   const response = {\r\n//     statusCode: 404,\r\n//     headers: {\r\n//         \"Access-Control-Allow-Origin\": \"*\",\r\n//         \"Access-Control-Allow-Credentials\": true\r\n//     },\r\n//     body: JSON.stringify({\r\n//       message: \"Room add request failed!\",\r\n//     },\r\n//     null,\r\n//     2)\r\n//   };\r\n//   return response;\r\n// }\r\n\r\n// const response = {\r\n//   statusCode: 200,\r\n//   headers: {\r\n//     \"Access-Control-Allow-Origin\": \"*\",\r\n//     \"Access-Control-Allow-Credentials\": true,\r\n//   },\r\n//   body: JSON.stringify(\r\n//     {\r\n//       message: \"Room added successfully! redirecting\",\r\n//       data: event.pathParameters.roomId,\r\n//     },\r\n//     null,\r\n//     2\r\n//   ),\r\n// };\r\n// return response;\r\n\n\n//# sourceURL=webpack:///./src/handlers/users.js?");

/***/ }),

/***/ "./src/utils/id.js":
/*!*************************!*\
  !*** ./src/utils/id.js ***!
  \*************************/
/*! exports provided: generateRandomString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateRandomString\", function() { return generateRandomString; });\n/**\r\n * Generates a random string containing numbers and letters\r\n * @param  {number} length The length of the string\r\n * @return {string} The generated string\r\n */\r\nconst generateRandomString = length => {\r\n    var text = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  \r\n    for (var i = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  };\n\n//# sourceURL=webpack:///./src/utils/id.js?");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"aws-sdk\");\n\n//# sourceURL=webpack:///external_%22aws-sdk%22?");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"uuid\");\n\n//# sourceURL=webpack:///external_%22uuid%22?");

/***/ })

/******/ })));